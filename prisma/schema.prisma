generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String   @id 
  username     String   @unique
  email        String?  @unique
  password     String
  roles        String
  refreshToken String?
  createdAt   DateTime @default(now())
}



model Student {
  id          String       @id @default(cuid())
  tenant_id   Int          @map("tenant_id")
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  blood_type  String
  sex         UserSex
  created_at  DateTime     @default(now())
  parent_id   String
  parent      Parent       @relation(fields: [parent_id], references: [id])
  class_id    Int         
  class       Class        @relation(fields: [class_id], references: [id])
  grade_id    Int
  grade       Grade        @relation(fields: [grade_id], references: [id])
  attendances Attendance[]
  results     Result[]
  studentFees StudentFee[]
  birthday    DateTime
}

model Teacher {
  id        String    @id @default(cuid())
  tenant_id Int      @map("tenant_id")
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  blood_type String
  sex       UserSex
  created_at DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
}

model Parent {
  id        String    @id @default(cuid())
  tenant_id  Int      @map("tenant_id")
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  created_at DateTime  @default(now())
  students  Student[]
}

model Grade {
  id    Int @id @default(autoincrement())
  tenant_id  Int    @map("tenant_id")
  level Int @unique
  students Student[]
  classess Class[]
}

model Class {
  id             Int    @id @default(autoincrement())
  tenant_id      Int    @map("tenant_id")
  name           String @unique
  capacity       Int
  supervisor_id  String?
  supervisor     Teacher?       @relation(fields: [supervisor_id], references: [id])
  lessons        Lesson[]
  students       Student[]
  grade_id       Int
  grade          Grade          @relation(fields: [grade_id], references: [id])
  events         Event[]
  announcements Announcement[]
}

model Subject {
  id         Int       @id @default(autoincrement())
  tenant_id  Int       @map("tenant_id")    
  name       String    @unique
  teachers   Teacher[]
  lessons    Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  tenant_id Int      @map("tenant_id")
  name      String
  day       Day
  start_time DateTime
  end_time   DateTime
  subject_id  Int
  subject     Subject      @relation(fields: [subject_id], references: [id])
  class_id     Int
  class       Class        @relation(fields: [class_id], references: [id])
  teacher_id  String
  teacher     Teacher      @relation(fields: [teacher_id], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  tenant_id  Int    @map("tenant_id")  
  title     String
  start_time DateTime
  end_time   DateTime
  lesson_id Int
  lesson   Lesson   @relation(fields: [lesson_id], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  tenant_id  Int    @map("tenant_id")   
  title     String
  start_date DateTime
  due_date   DateTime

  lesson_id Int
  lesson   Lesson   @relation(fields: [lesson_id], references: [id])
  results  Result[]
}

model Result {
  id             Int @id @default(autoincrement())
  tenant_id      Int    @map("tenant_id")  
  score          Int
  exam_id        Int?
  exam           Exam?       @relation(fields: [exam_id], references: [id])
  assignment_id  Int?
  assignment     Assignment? @relation(fields: [assignment_id], references: [id])
  student_id     String
  student        Student     @relation(fields: [student_id], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  tenant_id  Int    @map("tenant_id")
  date      DateTime
  present   Boolean
  student_id String
  student   Student @relation(fields: [student_id], references: [id])
  lesson_id  Int
  lesson    Lesson  @relation(fields: [lesson_id], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  tenant_id   Int      @map("tenant_id")
  title       String
  description String
  start_time   DateTime
  end_time     DateTime
  class_id    Int?
  class       Class? @relation(fields: [class_id], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  tenant_id   Int      @map("tenant_id")
  title       String
  description String
  date        DateTime
  class_id    Int?
  class       Class? @relation(fields: [class_id], references: [id])
}

model AskedMe {
  id           Int      @id @default(autoincrement())
  tenant_id    Int      @map("tenant_id")
  question     String
  search_text  String
  start_time   DateTime    
  end_time     DateTime   
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt  
}
model Tenant {
  id                       Int @id @default(autoincrement())
  name                     String
  slug                     String
  logo_url                 String
  default_language_code    String
  status                   String
  value_text               String
  color_theme              ColorTheme
  img_url                  String
  super_admin_id           Int?
  super_admin              SuperAdmin? @relation(fields: [super_admin_id], references: [id])
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
  @@map("MDS_TENANT") 
}

model SuperAdmin {
  id              Int      @id @default(autoincrement()) 
  super_admin     Boolean
  tenants         Tenant[]

  @@map("SUPER_ADMIN") 
}

model RegisterSchool {
  id           Int      @id @default(autoincrement())
  name         String
  teacher      String
  address      String
  phone_number String
  
  created_at   DateTime @default(now())
  @@map("REGISTOR_SCHOOL")
}
model  Notification_services{

  id               Int      @id @default(autoincrement())
  tenant_id        Int  
  recipient_id     Int
  recipient_type   String
  template_id      Int
  placeholders     String
  language         String
  template_content String
  status           Status
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@map("NOTIFICATION_SERVICES")
}

model Template_Notification {
  id               Int      @id @default(autoincrement())
  tenant_id        Int
  slug             String
  name             String
  description      String
  placeholders     String
  content          String
  status           Status
  created_on       DateTime @default(now())
  created_by       Int      // ya String agar user ID string hai
  updated_on       DateTime @updatedAt
  updated_by       Int?
  deleted_on       DateTime?
  deleted_by       Int?
  @@map("TEMPLATE_NOTIFICATION")
}
model Color_Model {
  id              Int      @id @default(autoincrement())
  tenant_id       Int      @unique
  primary         String   
  secondary       String
  background      String
  color           String
  surface         String
  text            String
  border          String  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  @@map("COLOR_MODEL")
}
model FeeCategory {
  id    Int    @id @default(autoincrement())
  name  String @unique
  fees  FeeStructure[]
  @@map("FEE_CATEGORY")
}

model FeeStructure {
  id          Int          @id @default(autoincrement())
  categoryId  Int
  category    FeeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  classes     String      // e.g., "Grade 1", "Grade 2"
  amount      Decimal     // Fee amount
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  studentFees StudentFee[]
  @@map("FEE_STRUCTURE")
}
model StudentFee {
  id          Int          @id @default(autoincrement())
  studentId   String
  student     Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  feeId       Int
  fee         FeeStructure @relation(fields: [feeId], references: [id], onDelete: Cascade)
  status      FeeStatus    @default(PENDING)
  dueDate     DateTime
  payments    Payment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@map("STUDENT_FEE")
}

model Payment {
  id          Int          @id @default(autoincrement())
  studentFeeId Int
  studentFee  StudentFee @relation(fields: [studentFeeId], references: [id])
  amount      String
  paymentDate DateTime    @default(now())
  method      PaymentMethod
  @@map("PAYMENT")
}
model Currency {
  id        Int     @id @default(autoincrement())
  name      String  @unique // Currency name (e.g., US Dollar, Euro)
  code      String  @unique // Currency code (e.g., USD, EUR)
  symbol    String? // Optional symbol (e.g., $, â‚¬)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("CURRENCY_CONVERTOR")
}


enum ColorTheme {   
  LIGHT
  DARK
  BLUE
  GREEN
  RED 
  GRAY
  YELLOW
  ORANGE
  WHITE
}
enum UserSex {
  MALE
  FEMALE
}
enum  Status{
   PENDING 
   ACTIVE 
   INACTIVE
}
enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum FeeStatus {
  PAID
  PENDING
  OVERDUE
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  ONLINE
}
